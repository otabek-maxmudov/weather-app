{"version":3,"file":"static/js/649.7ac19548.chunk.js","mappings":"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","sources":["functions/api.js","Redux/Actions/Actions.js","components/Navbar.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { message } from \"antd\";\r\n\r\nconst wa = \"https://api.weatherapi.com/v1/\";\r\nconst owm = \"https://community-open-weather-map.p.rapidapi.com/\";\r\n\r\n/* eslint-disable import/no-anonymous-default-export */\r\nexport default async (url, method, param, service) => {\r\n  try {\r\n    return await axios({\r\n      method,\r\n      url: service === \"wa\" ? wa + url : owm + url,\r\n      params:\r\n        service === \"wa\"\r\n          ? {\r\n              ...param,\r\n              key: \"5acedb6013114cefb2d95845220207\",\r\n              aqi: \"yes\",\r\n            }\r\n          : { ...param, cnt: \"7\", units: \"metric\" },\r\n      headers: {\r\n        \"X-RapidAPI-Key\": \"8f77261737msh9b27983e23282fdp1e189fjsne0887198b176\",\r\n        \"X-RapidAPI-Host\":\r\n          service === \"wa\" ? \"weatherapi-com.p.rapidapi.com\" : \"community-open-weather-map.p.rapidapi.com\",\r\n      },\r\n    });\r\n  } catch (error) {\r\n    message.error({ content: error.response.statusText, key: \"error\" });\r\n  }\r\n};\r\n","import api from \"../../functions/api\";\r\nimport {\r\n  SET_CURRENT_MODE,\r\n  SET_LOADING,\r\n  SET_CURRENT_FORECAST,\r\n  SET_LOCATION,\r\n  SET_SEARCH_RESULT,\r\n  SET_ASTRO_DATA,\r\n  SET_WEEKDAYS_FORECAST,\r\n  SET_DEGREE,\r\n  SET_CORDINATES,\r\n} from \"./Types\";\r\n\r\nexport const getCurrentForecast = (url, params) => async dispatch => {\r\n  dispatch({\r\n    type: SET_LOADING,\r\n    payload: true,\r\n  });\r\n  const res = await api(url, \"GET\", params, \"wa\");\r\n\r\n  if (res && res.status === 200) {\r\n    dispatch({\r\n      type: SET_CURRENT_FORECAST,\r\n      payload: res.data.current,\r\n    });\r\n    dispatch({\r\n      type: SET_LOCATION,\r\n      payload: res.data.location,\r\n    });\r\n    dispatch({\r\n      type: SET_ASTRO_DATA,\r\n      payload: res.data.astronomy?.astro,\r\n    });\r\n  }\r\n  dispatch({\r\n    type: SET_LOADING,\r\n    payload: false,\r\n  });\r\n};\r\n\r\nexport const getCurrentAstronomy = (url, params) => async dispatch => {\r\n  dispatch({\r\n    type: SET_LOADING,\r\n    payload: true,\r\n  });\r\n\r\n  const res = await api(url, \"GET\", params, \"wa\");\r\n\r\n  if (res && res.status === 200) {\r\n    dispatch({\r\n      type: SET_ASTRO_DATA,\r\n      payload: res.data.astronomy.astro,\r\n    });\r\n  }\r\n\r\n  dispatch({\r\n    type: SET_LOADING,\r\n    payload: false,\r\n  });\r\n};\r\n\r\nexport const setCurrentMode = data => dispatch => {\r\n  dispatch({\r\n    type: SET_CURRENT_MODE,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setDegreeMode = data => dispatch => {\r\n  dispatch({\r\n    type: SET_DEGREE,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const setCordinates = data => dispatch => {\r\n  dispatch({\r\n    type: SET_CORDINATES,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport const getSearchResult = (url, params) => async dispatch => {\r\n  dispatch({\r\n    type: SET_LOADING,\r\n    payload: true,\r\n  });\r\n\r\n  const res = await api(url, \"GET\", params, \"wa\");\r\n\r\n  if (res && res.status === 200) {\r\n    dispatch({\r\n      type: SET_SEARCH_RESULT,\r\n      payload: res.data,\r\n    });\r\n  }\r\n\r\n  dispatch({\r\n    type: SET_LOADING,\r\n    payload: false,\r\n  });\r\n};\r\n\r\nexport const getWeekdaysForecast = (url, params) => async dispatch => {\r\n  dispatch({\r\n    type: SET_LOADING,\r\n    payload: true,\r\n  });\r\n\r\n  const res = await api(url, \"GET\", params, \"owm\");\r\n\r\n  if (res && res.status === 200) {\r\n    dispatch({\r\n      type: SET_WEEKDAYS_FORECAST,\r\n      payload: res.data.list,\r\n    });\r\n  }\r\n\r\n  dispatch({\r\n    type: SET_LOADING,\r\n    payload: false,\r\n  });\r\n};\r\n","import { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport DarkModeToggle from \"react-dark-mode-toggle\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { setCurrentMode, setDegreeMode } from \"../Redux/Actions/Actions\";\r\n\r\nconst Navbar = ({ setDegreeMode, setCurrentMode, degree_C }) => {\r\n  const [isActive, setIsActive] = useState(true);\r\n  const [isDegActive, setIsDegActive] = useState(true);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n  const { pathname } = useLocation();\r\n\r\n  const NavButton = ({ title, path, isClicked }) => (\r\n    <Link to={path} className=\"text-black hover:text-black\">\r\n      <button\r\n        type=\"button\"\r\n        className={`text-base md:text-xl font-bold mr-4 border-black dark:border-gray-200 transition-colors ${\r\n          pathname === path\r\n            ? \"border-b-2 dark:text-gray-200 transition-colors\"\r\n            : `text-gray-300 dark:text-gray-500 border-b-0 transition-colors`\r\n        }`}\r\n        onClick={() => setIsActive(prev => (isClicked ? prev : !prev))}\r\n        clicked={isClicked}>\r\n        {title}\r\n      </button>\r\n    </Link>\r\n  );\r\n\r\n  const DegreeButton = ({ degSign, isClicked }) => (\r\n    <button\r\n      type=\"button\"\r\n      className={`text-base md:text-xl font-bold mr-4 rounded-full w-8 h-8 md:w-10 md:h-10 ${\r\n        isClicked\r\n          ? \"text-white dark:text-gray-600 bg-black dark:bg-gray-200 transition-colors\"\r\n          : \"bg-white dark:bg-gray-700 text-black dark:text-gray-200 transition-colors\"\r\n      }`}\r\n      onClick={() => {\r\n        setIsDegActive(prev => (isClicked ? prev : !prev));\r\n        setDegreeMode(isClicked ? degree_C : !degree_C);\r\n      }}\r\n      clicked={isClicked}>\r\n      &#176;{degSign}\r\n    </button>\r\n  );\r\n\r\n  const onChange = checked => {\r\n    if (checked) {\r\n      setIsDarkMode(true);\r\n      setCurrentMode(\"dark\");\r\n    } else {\r\n      setIsDarkMode(false);\r\n      setCurrentMode(\"light\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap justify-between items-center\">\r\n      <div>\r\n        <NavButton title=\"Today\" path=\"/today\" isClicked={!isActive} />\r\n        <NavButton title=\"Week\" path=\"/week\" isClicked={isActive} />\r\n      </div>\r\n\r\n      <div className=\"w-24 md:w-26 h-10 md:h-12 flex justify-between items-center\">\r\n        <DarkModeToggle onChange={onChange} checked={isDarkMode} size={\"100%\"} className=\"DarkModeToggle\" />\r\n      </div>\r\n\r\n      <div>\r\n        <DegreeButton degSign=\"C\" isClicked={isDegActive} />\r\n        <DegreeButton degSign=\"F\" isClicked={!isDegActive} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(({ app }) => ({ ...app }), { setCurrentMode, setDegreeMode })(Navbar);\r\n"],"names":["url","method","param","service","axios","params","key","aqi","cnt","units","headers","message","content","response","statusText","getCurrentForecast","dispatch","type","SET_LOADING","payload","api","res","status","SET_CURRENT_FORECAST","data","current","SET_LOCATION","location","SET_ASTRO_DATA","astronomy","astro","getCurrentAstronomy","setCurrentMode","SET_CURRENT_MODE","setDegreeMode","SET_DEGREE","setCordinates","SET_CORDINATES","getSearchResult","SET_SEARCH_RESULT","getWeekdaysForecast","SET_WEEKDAYS_FORECAST","list","connect","app","degree_C","useState","isActive","setIsActive","isDegActive","setIsDegActive","isDarkMode","setIsDarkMode","pathname","useLocation","NavButton","title","path","isClicked","to","className","onClick","prev","clicked","DegreeButton","degSign","onChange","checked","size"],"sourceRoot":""}